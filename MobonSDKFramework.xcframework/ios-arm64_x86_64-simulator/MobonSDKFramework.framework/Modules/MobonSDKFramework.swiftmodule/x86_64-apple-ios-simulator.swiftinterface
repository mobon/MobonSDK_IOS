// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MobonSDKFramework
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import ImageIO
import OSLog
import Swift
import UIKit
import WebKit
@objc public enum MOPopupType : Swift.Int {
  case normal
  case full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MobonInterstitialAdViewDelegate {
  @objc func interstitialAdNotLoaded(_ interstitialAdView: MobonSDKFramework.MobonInterstitialAdView)
  @objc func interstitialDidReceiveAd(_ interstitialAdView: MobonSDKFramework.MobonInterstitialAdView)
  @objc func interstitialFailedAd(_ interstitialAdView: MobonSDKFramework.MobonInterstitialAdView, _ error: Swift.String)
  @objc func interstitialClicked(_ interstitialAdView: MobonSDKFramework.MobonInterstitialAdView)
  @objc func interstitialClose(_ interstitialAdView: MobonSDKFramework.MobonInterstitialAdView)
}
@_hasMissingDesignatedInitializers @objc public class MobonInterstitialAdView : UIKit.UIViewController {
  @objc public var delegate: MobonSDKFramework.MobonInterstitialAdViewDelegate?
  @objc public var rootViewController: UIKit.UIViewController?
  @objc public var isADLoaded: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc public init(mediaCode: Swift.String, unitId: Swift.String, type: MobonSDKFramework.MOPopupType = .full)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc public func loadAd()
  @objc public func show()
  @objc public func dismiss()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc public protocol MobonBannerAdViewDelegate {
  @objc func adViewDidReceiveAd(_ bannerAdView: MobonSDKFramework.MobonBannerAdView)
  @objc func adViewFailedAd(_ bannerAdView: MobonSDKFramework.MobonBannerAdView, _ error: Swift.String)
  @objc func adViewClicked(_ bannerAdView: MobonSDKFramework.MobonBannerAdView)
}
@_hasMissingDesignatedInitializers @objc public class MobonBannerAdView : UIKit.UIView {
  @objc public var delegate: MobonSDKFramework.MobonBannerAdViewDelegate?
  @objc public var rootViewController: UIKit.UIViewController?
  @objc public var interval: Swift.Int {
    @objc get
    @objc set
  }
  @objc public init(frame: CoreGraphics.CGRect = .zero, mediaCode: Swift.String, sCode: Swift.String)
  @objc deinit
  @objc public func loadAd()
  @objc public func pauseUpdateAd()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public struct MOImageColors {
  public var background: UIKit.UIColor!
  public var primary: UIKit.UIColor!
  public var secondary: UIKit.UIColor!
  public var detail: UIKit.UIColor!
  public init(background: UIKit.UIColor, primary: UIKit.UIColor, secondary: UIKit.UIColor, detail: UIKit.UIColor)
}
public enum MOImageColorsQuality : CoreGraphics.CGFloat {
  case lowest
  case low
  case high
  case highest
  public init?(rawValue: CoreGraphics.CGFloat)
  public typealias RawValue = CoreGraphics.CGFloat
  public var rawValue: CoreGraphics.CGFloat {
    get
  }
}
extension UIImage {
  public func getColors(quality: MobonSDKFramework.MOImageColorsQuality = .high, _ completion: @escaping (MobonSDKFramework.MOImageColors?) -> Swift.Void)
  public func getColors(quality: MobonSDKFramework.MOImageColorsQuality = .high) -> MobonSDKFramework.MOImageColors?
}
@_hasMissingDesignatedInitializers public class MobonSDKInfo {
  public static var version: Swift.String {
    get
  }
  @objc deinit
}
extension MobonSDKFramework.MOPopupType : Swift.Equatable {}
extension MobonSDKFramework.MOPopupType : Swift.Hashable {}
extension MobonSDKFramework.MOPopupType : Swift.RawRepresentable {}
extension MobonSDKFramework.MOImageColorsQuality : Swift.Equatable {}
extension MobonSDKFramework.MOImageColorsQuality : Swift.Hashable {}
extension MobonSDKFramework.MOImageColorsQuality : Swift.RawRepresentable {}
